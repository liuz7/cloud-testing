/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmware.vchs.load.generator.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-6-10")
public class TestResult implements org.apache.thrift.TBase<TestResult, TestResult._Fields>, java.io.Serializable, Cloneable, Comparable<TestResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TestResult");

  private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField FAILURE_FIELD_DESC = new org.apache.thrift.protocol.TField("failure", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("results", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField REQUESTS_FIELD_DESC = new org.apache.thrift.protocol.TField("requests", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TestResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TestResultTupleSchemeFactory());
  }

  public double success; // required
  public double failure; // required
  public Map<String,List<Double>> results; // required
  public List<String> requests; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUCCESS((short)1, "success"),
    FAILURE((short)2, "failure"),
    RESULTS((short)3, "results"),
    REQUESTS((short)4, "requests");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUCCESS
          return SUCCESS;
        case 2: // FAILURE
          return FAILURE;
        case 3: // RESULTS
          return RESULTS;
        case 4: // REQUESTS
          return REQUESTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUCCESS_ISSET_ID = 0;
  private static final int __FAILURE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FAILURE, new org.apache.thrift.meta_data.FieldMetaData("failure", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RESULTS, new org.apache.thrift.meta_data.FieldMetaData("results", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
    tmpMap.put(_Fields.REQUESTS, new org.apache.thrift.meta_data.FieldMetaData("requests", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TestResult.class, metaDataMap);
  }

  public TestResult() {
  }

  public TestResult(
    double success,
    double failure,
    Map<String,List<Double>> results,
    List<String> requests)
  {
    this();
    this.success = success;
    setSuccessIsSet(true);
    this.failure = failure;
    setFailureIsSet(true);
    this.results = results;
    this.requests = requests;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TestResult(TestResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.success = other.success;
    this.failure = other.failure;
    if (other.isSetResults()) {
      Map<String,List<Double>> __this__results = new HashMap<String,List<Double>>(other.results.size());
      for (Map.Entry<String, List<Double>> other_element : other.results.entrySet()) {

        String other_element_key = other_element.getKey();
        List<Double> other_element_value = other_element.getValue();

        String __this__results_copy_key = other_element_key;

        List<Double> __this__results_copy_value = new ArrayList<Double>(other_element_value);

        __this__results.put(__this__results_copy_key, __this__results_copy_value);
      }
      this.results = __this__results;
    }
    if (other.isSetRequests()) {
      List<String> __this__requests = new ArrayList<String>(other.requests);
      this.requests = __this__requests;
    }
  }

  public TestResult deepCopy() {
    return new TestResult(this);
  }

  @Override
  public void clear() {
    setSuccessIsSet(false);
    this.success = 0.0;
    setFailureIsSet(false);
    this.failure = 0.0;
    this.results = null;
    this.requests = null;
  }

  public double getSuccess() {
    return this.success;
  }

  public TestResult setSuccess(double success) {
    this.success = success;
    setSuccessIsSet(true);
    return this;
  }

  public void unsetSuccess() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
  }

  /** Returns true if field success is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
  }

  public void setSuccessIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
  }

  public double getFailure() {
    return this.failure;
  }

  public TestResult setFailure(double failure) {
    this.failure = failure;
    setFailureIsSet(true);
    return this;
  }

  public void unsetFailure() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAILURE_ISSET_ID);
  }

  /** Returns true if field failure is set (has been assigned a value) and false otherwise */
  public boolean isSetFailure() {
    return EncodingUtils.testBit(__isset_bitfield, __FAILURE_ISSET_ID);
  }

  public void setFailureIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAILURE_ISSET_ID, value);
  }

  public int getResultsSize() {
    return (this.results == null) ? 0 : this.results.size();
  }

  public void putToResults(String key, List<Double> val) {
    if (this.results == null) {
      this.results = new HashMap<String,List<Double>>();
    }
    this.results.put(key, val);
  }

  public Map<String,List<Double>> getResults() {
    return this.results;
  }

  public TestResult setResults(Map<String,List<Double>> results) {
    this.results = results;
    return this;
  }

  public void unsetResults() {
    this.results = null;
  }

  /** Returns true if field results is set (has been assigned a value) and false otherwise */
  public boolean isSetResults() {
    return this.results != null;
  }

  public void setResultsIsSet(boolean value) {
    if (!value) {
      this.results = null;
    }
  }

  public int getRequestsSize() {
    return (this.requests == null) ? 0 : this.requests.size();
  }

  public java.util.Iterator<String> getRequestsIterator() {
    return (this.requests == null) ? null : this.requests.iterator();
  }

  public void addToRequests(String elem) {
    if (this.requests == null) {
      this.requests = new ArrayList<String>();
    }
    this.requests.add(elem);
  }

  public List<String> getRequests() {
    return this.requests;
  }

  public TestResult setRequests(List<String> requests) {
    this.requests = requests;
    return this;
  }

  public void unsetRequests() {
    this.requests = null;
  }

  /** Returns true if field requests is set (has been assigned a value) and false otherwise */
  public boolean isSetRequests() {
    return this.requests != null;
  }

  public void setRequestsIsSet(boolean value) {
    if (!value) {
      this.requests = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((Double)value);
      }
      break;

    case FAILURE:
      if (value == null) {
        unsetFailure();
      } else {
        setFailure((Double)value);
      }
      break;

    case RESULTS:
      if (value == null) {
        unsetResults();
      } else {
        setResults((Map<String,List<Double>>)value);
      }
      break;

    case REQUESTS:
      if (value == null) {
        unsetRequests();
      } else {
        setRequests((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return Double.valueOf(getSuccess());

    case FAILURE:
      return Double.valueOf(getFailure());

    case RESULTS:
      return getResults();

    case REQUESTS:
      return getRequests();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    case FAILURE:
      return isSetFailure();
    case RESULTS:
      return isSetResults();
    case REQUESTS:
      return isSetRequests();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TestResult)
      return this.equals((TestResult)that);
    return false;
  }

  public boolean equals(TestResult that) {
    if (that == null)
      return false;

    boolean this_present_success = true;
    boolean that_present_success = true;
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (this.success != that.success)
        return false;
    }

    boolean this_present_failure = true;
    boolean that_present_failure = true;
    if (this_present_failure || that_present_failure) {
      if (!(this_present_failure && that_present_failure))
        return false;
      if (this.failure != that.failure)
        return false;
    }

    boolean this_present_results = true && this.isSetResults();
    boolean that_present_results = true && that.isSetResults();
    if (this_present_results || that_present_results) {
      if (!(this_present_results && that_present_results))
        return false;
      if (!this.results.equals(that.results))
        return false;
    }

    boolean this_present_requests = true && this.isSetRequests();
    boolean that_present_requests = true && that.isSetRequests();
    if (this_present_requests || that_present_requests) {
      if (!(this_present_requests && that_present_requests))
        return false;
      if (!this.requests.equals(that.requests))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_success = true;
    list.add(present_success);
    if (present_success)
      list.add(success);

    boolean present_failure = true;
    list.add(present_failure);
    if (present_failure)
      list.add(failure);

    boolean present_results = true && (isSetResults());
    list.add(present_results);
    if (present_results)
      list.add(results);

    boolean present_requests = true && (isSetRequests());
    list.add(present_requests);
    if (present_requests)
      list.add(requests);

    return list.hashCode();
  }

  @Override
  public int compareTo(TestResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFailure()).compareTo(other.isSetFailure());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailure()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failure, other.failure);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResults()).compareTo(other.isSetResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.results, other.results);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequests()).compareTo(other.isSetRequests());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequests()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requests, other.requests);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TestResult(");
    boolean first = true;

    sb.append("success:");
    sb.append(this.success);
    first = false;
    if (!first) sb.append(", ");
    sb.append("failure:");
    sb.append(this.failure);
    first = false;
    if (!first) sb.append(", ");
    sb.append("results:");
    if (this.results == null) {
      sb.append("null");
    } else {
      sb.append(this.results);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requests:");
    if (this.requests == null) {
      sb.append("null");
    } else {
      sb.append(this.requests);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TestResultStandardSchemeFactory implements SchemeFactory {
    public TestResultStandardScheme getScheme() {
      return new TestResultStandardScheme();
    }
  }

  private static class TestResultStandardScheme extends StandardScheme<TestResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TestResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUCCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.success = iprot.readDouble();
              struct.setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FAILURE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.failure = iprot.readDouble();
              struct.setFailureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.results = new HashMap<String,List<Double>>(2*_map0.size);
                String _key1;
                List<Double> _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                    _val2 = new ArrayList<Double>(_list4.size);
                    double _elem5;
                    for (int _i6 = 0; _i6 < _list4.size; ++_i6)
                    {
                      _elem5 = iprot.readDouble();
                      _val2.add(_elem5);
                    }
                    iprot.readListEnd();
                  }
                  struct.results.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setResultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REQUESTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list7 = iprot.readListBegin();
                struct.requests = new ArrayList<String>(_list7.size);
                String _elem8;
                for (int _i9 = 0; _i9 < _list7.size; ++_i9)
                {
                  _elem8 = iprot.readString();
                  struct.requests.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setRequestsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TestResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      oprot.writeDouble(struct.success);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAILURE_FIELD_DESC);
      oprot.writeDouble(struct.failure);
      oprot.writeFieldEnd();
      if (struct.results != null) {
        oprot.writeFieldBegin(RESULTS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.results.size()));
          for (Map.Entry<String, List<Double>> _iter10 : struct.results.entrySet())
          {
            oprot.writeString(_iter10.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter10.getValue().size()));
              for (double _iter11 : _iter10.getValue())
              {
                oprot.writeDouble(_iter11);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.requests != null) {
        oprot.writeFieldBegin(REQUESTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.requests.size()));
          for (String _iter12 : struct.requests)
          {
            oprot.writeString(_iter12);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TestResultTupleSchemeFactory implements SchemeFactory {
    public TestResultTupleScheme getScheme() {
      return new TestResultTupleScheme();
    }
  }

  private static class TestResultTupleScheme extends TupleScheme<TestResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TestResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSuccess()) {
        optionals.set(0);
      }
      if (struct.isSetFailure()) {
        optionals.set(1);
      }
      if (struct.isSetResults()) {
        optionals.set(2);
      }
      if (struct.isSetRequests()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSuccess()) {
        oprot.writeDouble(struct.success);
      }
      if (struct.isSetFailure()) {
        oprot.writeDouble(struct.failure);
      }
      if (struct.isSetResults()) {
        {
          oprot.writeI32(struct.results.size());
          for (Map.Entry<String, List<Double>> _iter13 : struct.results.entrySet())
          {
            oprot.writeString(_iter13.getKey());
            {
              oprot.writeI32(_iter13.getValue().size());
              for (double _iter14 : _iter13.getValue())
              {
                oprot.writeDouble(_iter14);
              }
            }
          }
        }
      }
      if (struct.isSetRequests()) {
        {
          oprot.writeI32(struct.requests.size());
          for (String _iter15 : struct.requests)
          {
            oprot.writeString(_iter15);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TestResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.success = iprot.readDouble();
        struct.setSuccessIsSet(true);
      }
      if (incoming.get(1)) {
        struct.failure = iprot.readDouble();
        struct.setFailureIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.results = new HashMap<String,List<Double>>(2*_map16.size);
          String _key17;
          List<Double> _val18;
          for (int _i19 = 0; _i19 < _map16.size; ++_i19)
          {
            _key17 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list20 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
              _val18 = new ArrayList<Double>(_list20.size);
              double _elem21;
              for (int _i22 = 0; _i22 < _list20.size; ++_i22)
              {
                _elem21 = iprot.readDouble();
                _val18.add(_elem21);
              }
            }
            struct.results.put(_key17, _val18);
          }
        }
        struct.setResultsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.requests = new ArrayList<String>(_list23.size);
          String _elem24;
          for (int _i25 = 0; _i25 < _list23.size; ++_i25)
          {
            _elem24 = iprot.readString();
            struct.requests.add(_elem24);
          }
        }
        struct.setRequestsIsSet(true);
      }
    }
  }

}

