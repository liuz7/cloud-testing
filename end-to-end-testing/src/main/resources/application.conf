vchs {
  debug = true
  messagebus {
    host = "192.168.56.40"
    port = 4222
    host = ${?NATS_HOST}
    port = ${?NATS_PORT}
    username = ""
    password = ""
    request = "dbaas.gw.one"
    event = "dbaas.gw.all"
    notificationTemplate = "notification.gw.%s.%s"
    node = "dbaas.node.liuda-mssqlnode-0"
  }
  iam {
    enabled = false
    enabled = ${?IAM_ENABLED}
  }
  etcd {
    host = "192.168.56.40"
    port = 4001
    host = ${?ETCD_HOST}
    port = ${?ETCD_PORT}
    base_path = "/v2/keys"
    connect_timeout = 10
    read_timeout = 10
    retry {
      type = "randomsleep"
      maxAttempt = 3
      sleepTime = 3
      bound = 32
    }
  }
  membership {
    producer {
      dir = "nodes"
    }
    lock {
      dir = "locks"
      ttl = 60
    }
    selector {
      class_name = "com.vmware.vchs.dbaas.membership.impl.NodeSelector"
    }
  }
  idempotent {
    dir = "requests"
    ttl = 3600
  }
  dds {
    engine = "rdbms"
    params {
      driver = "com.mysql.jdbc.Driver"
      url = "jdbc:mysql://192.168.56.40:3306/dbaas"
      user = "dbaas"
      password = "dbaas"
      url = ${?RDBMS_URL}
      user = ${?RDBMS_USER}
      password = ${?RDBMS_PASSWORD}
    }
  }
  tm {
    pub = "VCHS.AAS.TASK"
    query = "VCHS.AAS.TASK.QUERY"
    nodepubprefix = "dbaas.node."
    gwpub = "dbaas.gw.task"
    gwack = "dbaas.gw.ack"
    serializationtype = "application/json"
    timeout {
      instance {
        create = 300
        delete = 300
      }
      snapshot {
        create = 300
        delete = 300
      }
      purgeorphan = 1800
    }
    retry {
      type = "randomsleep"
      maxAttempt = 3
      sleepTime = 3
      bound = 32
    }
  }
  cb {
    etcd {
      circuitBreakerEnable = false
      numberOfSlots = 16
      interval = 2000
      openTimeout = 32000
      openThreshold = 10
      errorPercentage = 50
      circuitForceOpen = false
      circuitForceClose = false
    }
  }
  transport_plugins = [
    {
      plugin {
        name = "NATS"
        transportFacory = "com.vmware.vchs.aas.transport.adapter.nats.NatsTransportFactory"
      }
    }
  ]
  housekeeper {
    enabled = true
    request_dir = "housekeeper"
    cleanup {
      enabled = true
      period = 60
      timeout {
        instance {
          failed = 300
          deleted = 300
          creating = 3600
        }
        instanceBackup {
          failed = 300
          deleted = 300
          creating = 3600
        }
        snapshot {
          failed = 300
          deleted = 300
          creating = 3600
        }
        snapshotBackup {
          failed = 300
          deleted = 300
          creating = 3600
        }
      }
    }
    purgeorphan {
      enabled = true
      period = 3600
    }
  }
  sns {
    enabled = false
    enabled = ${?SNS_ENABLED}
    responseTimeout = 5
    responseTimeout = ${?SNS_RESPONSE_TIMEOUT}
    requestTopic = SNS.PROVISION.REQUEST
    requestTopic = ${?SNS_REQUEST_TOPIC}
    vdcKey = "fakekey"
    vdcKey = ${?SNS_VDC_KEY}
  }
}

akka {
  /main {
    router = round-robin-pool
    resizer {
      lower-bound = 2
      upper-bound = 6
      messages-per-resize = 2
    }
  }

  loglevel = INFO
  actor {
    debug {
      receive = on
      autoreceive = on
      lifecycle = on
    }
  }

  loggers = ["akka.event.slf4j.Slf4jLogger"]
}