buildscript {
    ext {
        springBootVersion = '1.2.5.RELEASE'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.spring.io/release" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/snapshot" }
        maven { url 'http://dl.bintray.com/cjstehno/public' }

    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'org.springframework:springloaded:1.2.0.M1'
        classpath 'gradle-templates:gradle-templates:1.5'
        classpath 'org.hidetake:gradle-ssh-plugin:1.1.3'
    }
}

subprojects {
    apply plugin: 'templates'
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'project-report'
    apply plugin: "jacoco"
    apply plugin: "sonar-runner"
    apply plugin: 'spring-boot'
    apply plugin: 'application'
    apply plugin: 'maven-publish'
    apply plugin: 'org.hidetake.ssh'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    version = '1.0'
    group = 'com.vmware.vchs'

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.spring.io/release" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/snapshot" }
        maven { url 'http://build-squid.eng.vmware.com/nexus/content/groups/repo' }
        maven { url 'http://build-maven-repo.eng.vmware.com:8081/nexus/content/groups/repo' }
        maven { url 'http://archiva.aas.eng.vmware.com/archiva/repository/snapshots' }
        maven { url 'http://archiva.aas.eng.vmware.com/archiva/repository/internal' }
        maven { url 'https://nexus.jackpinetech.com/nexus/content/groups/public' }
    }

    publishing {
        repositories {
            maven {
                //url "$buildDir/repo"
                url "http://archiva.aas.eng.vmware.com/archiva/repository/internal/"
                //url "http://archiva.aas.eng.vmware.com/archiva/repository/snapshots/"
                credentials {
                    username 'jenkins'
                    password 'ca$hc0w'
                }
            }
        }
    }

    dependencies {
        compile group: 'org.assertj', name: 'assertj-core', version: '3.0.0'
        compile(group: 'org.uncommons', name: 'reportng', version: '1.1.4') {
            exclude group: 'org.testng'
        }
        compile group: 'com.google.inject', name: 'guice', version: '3.0'
        compile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.5.4'
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.5.4'
        compile group: 'com.google.guava', name: 'guava', version: '18.0'
        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.12'
        compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.3'
        compile group: 'ch.qos.logback', name: 'logback-core', version: '1.1.3'
        compile group: 'org.testng', name: 'testng', version: '6.9.6'
        compile("commons-net:commons-net:3.3")
    }

    idea {
        module {
            inheritOutputDirs = false
            outputDir = file("$buildDir/classes/main/")
        }
    }

    test {
        useTestNG()
        systemProperties "org.uncommons.reportng.title": "The test result for cloud-testing"
    }

    tasks.withType(Test) {
        useTestNG()
        systemProperties = System.properties
        systemProperties['user.dir'] = workingDir
        testLogging {
            events "passed", "skipped", "failed", "standardError"
            showStackTraces = true
            exceptionFormat "full"
            info {
                events "passed", "skipped", "failed", "standardError", "standardOut", "started"
                showStackTraces = true
                exceptionFormat "full"
            }
        }
        options {
            useDefaultListeners = true
            listeners << 'org.uncommons.reportng.HTMLReporter'
            listeners << 'org.uncommons.reportng.JUnitXMLReporter'
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.destination "${buildDir}/jacocoHtml"
        }
    }

    task cleanLog(type: Delete) {
        delete 'log', "*.log"
    }

    sonarRunner {
        sonarProperties {
            property "sonar.host.url", "$sonar_host_url"
            property "sonar.jdbc.url", "$sonar_jdbc_url"
            property "sonar.jdbc.driverClassName", "$sonar_jdbc_driverClassName"
            property "sonar.jdbc.username", "$sonar_jdbc_username"
            property "sonar.jdbc.password", "$sonar_jdbc_password"
        }
    }
}

project(':service-discovery') {
    dependencies {
        compile project(':common')
    }
}

project(':agent-server') {
    dependencies {
        compile project(':service-discovery')
    }
}

project(':end-to-end-testing') {
    dependencies {
        compile project(':test-client'), project(':persistence')
    }
}

project(':test-client') {
    dependencies {
        compile project(':common')
    }
}

project(':persistence') {
    dependencies {
        compile project(':common')
    }
}

project(':web') {
    dependencies {
        compile project(':persistence')
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.7'
}
